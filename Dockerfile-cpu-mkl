FROM tensorflow/tensorflow:latest-devel

LABEL maintainer="Igor Rabkin<igor.rabkin@xiaoyi.com>"

################################################
#          Basic desktop environment           #
################################################

# Locale, language
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales
RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
locale-gen
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

#################################################
#          Set Time Zone Asia/Jerusalem         #
################################################# 

ENV TZ=Asia/Jerusalem
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

#################################################
#     Very basic installations                  #
#################################################

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends \
    build-essential \
    curl \
    wget \
	  git \
	  htop \
	  iputils-ping \
	  rsync \
	  zip \
	  unzip \
	  tree \
	  nano \
	  mlocate \
	  tzdata \
	  golang \
    vim \
    emacs \
	  pkg-config && \
	  dpkg-reconfigure -f noninteractive tzdata && \
	  apt-get clean && \
    rm -rf /var/lib/apt/lists/*

##################################
#            Set args            #
##################################

ARG TF_BRANCH=r1.7
ARG WHL_DIR=/whl


########################################
#    Install Python pip & dependences  #
########################################

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python3.6 get-pip.py && \
    rm get-pip.py 
    
RUN pip --no-cache-dir install --upgrade \
        pip setuptools

#RUN pip --no-cache-dir install wheel 

#######################################################
#  Download & Build TensorFlow With CPU Support Only  #
#######################################################

WORKDIR /
RUN \
    git clone https://github.com/tensorflow/tensorflow.git && \
    git clone --branch=${TF_BRANCH} --depth=1 https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git checkout ${TF_BRANCH}
WORKDIR /tensorflow

############################################################################
# Configure the build for CPU with MKL by accepting default build options  #
# and setting library locations                                            #
############################################################################

    ENV CI_BUILD_PYTHON=python \
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH} \
    PYTHON_BIN_PATH=/usr/bin/python \
    PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages \
    CC_OPT_FLAGS='-march=native' \
    TF_NEED_JEMALLOC=0 \
    TF_NEED_GCP=0 \
    TF_NEED_CUDA=0 \
    TF_NEED_HDFS=0 \
    TF_NEED_S3=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_GDR=0 \
    TF_ENABLE_XLA=0 \
    TF_NEED_VERBS=0 \
    TF_NEED_MPI=0
RUN ./configure

# Build and Install TensorFlow.
# The 'mkl' option builds with Intel(R) Math Kernel Library (MKL), which detects
# the platform it is currently running on and takes appropriately optimized 
# paths. The -march=native option is for code that is not in MKL, and assumes
# this container will be run on the same architecture on which it is built.
RUN LD_LIBRARY_PATH=${LD_LIBRARY_PATH} \
    bazel build --config="opt" \
                --config=mkl \
                --copt="-DEIGEN_USE_VML"" \
                --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
                //tensorflow/tools/pip_package:build_pip_package && \
    mkdir ${WHL_DIR} && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package ${WHL_DIR}

# Clean up Bazel cache when done, but leave the whl.
# This will upgrade the default Tensorflow version with the Intel MKL version

RUN pip --no-cache-dir install --upgrade ${WHL_DIR}/tensorflow-*.whl && \
    rm -rf /root/.cache
    
    
 #################################
 # Check Tensorflow Installation #
 #################################
 
COPY tf_check.py /
RUN chmod u+x tf_check.py && /
    #python tf_check.py

WORKDIR /root

#########################################
# Add welcome message with instructions #
#########################################

RUN echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/issue && cat /etc/motd' \
	>> /etc/bash.bashrc \
	; echo "\
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\
|								\n\
| Docker container running Ubuntu				\n\
| with TensorFlow ${TF_BRANCH} optimized for CPU		\n\
| with Intel(R) MKL Support						\n\
|								\n\
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\
\n "\
	> /etc/motd
